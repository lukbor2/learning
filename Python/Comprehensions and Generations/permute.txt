THIS IS AN EXPLANATION OF HOW permute.py works


starting sequence [1,2,3]

permute([1,2,3])
res = []
i in (0,1,2)                  # (range(len([1,2,3])) )
    i = 0
    rest = [] + [2,3] = [2,3]
    x in permute([2,3])         #recursive call

permute([2,3])
res = []
i in (0,1)                   # (range(len([2,3]) )
    i = 0
    rest = [] + [3] = [3]
    x in permute([3])           #recursive call 

permute([3])
res = []
i in (0)                  # ( range(len([3])) )
    i = 0
    rest = [] + [] = []
    x in permute([])            #recursive call. permute([]) returns []
        res = [] + [3] + []     #this instruction is executed because permute([]) returns a list with one element which is []. Therefore this for loop is executed once.
                                #note: it's a list with one element, not just an empty list. If it was an empty list this instruction would not be executed.

permute([])
    return []

permute([3])
return [3]               

permute([2,3])
res = []
i in (0,1)                   # (range(len([2,3]) )
    i = 0 
    rest = [] + [3]
    x in permute([3])        #the result of permute([3]) is [3]
        res = [] + [2] + [3] = [2,3] #now the loop is complete

    i = 1
    rest = [2] + []
    x in permute([2])         #the result of permute([2]) is [2]
        res = [2,3] + [3] + [2] = [2,3], [3,2]
return [2,3], [3,2]


permute([1,2,3])
res = []
i in (0,1,2)                  # (range(len([1,2,3])) )
    i = 0
    rest = [] + [2,3]
    x in permute([2,3]) #the result of permute([2,3]) is [2,3], [3,2]
        x = [2,3]
        res = [] + [1] + [2,3] = [1,2,3]
        x = [3,2]
        res = [1,2,3] + [1] + [3,2] = [1,2,3], [1,3,2]

********************************


starting sequence [3]

permute([3])
    res = []
    i in 0
    i = 0
    rest = [] + []
    x in permute([])    #permute([]) returns an empty list
        res = [] + [3] + []     #this instruction is executed because permute([]) returns a list with one element which is []. Therefore this for loop is executed once.
    return [3]          #res equals [3]