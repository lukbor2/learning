
#TODO:	Look at the TODOs in each file.

#TODO:	Implement a Delete command which acts on multiple selected records.

#TODO:	Implement a search box to search for patients.

#TODO:	For a selected patient (or via a link) go to another page which shows a list of all BP measures for the given patient.
		And from there I should be able to edit, add and delete a bp measure for that patient.

#TODO:	In views.py, in the PatientCreate view, why reverse_lazy works and just reverse does not work? reverse works in the tutorial app.
		It would be interesting to understand. Furthermore, I did not understand why I have to specify the app name in the reverse_lazy.
		In the tutorial app was not needed.

#TODO:	Try to re-implement the PatientCreate view using a html template which is not the standard one (modelname_form.html) and using a form class.

#TODO:	When validating the form, in case of errors, move focus to the first field with errors (I think for this I will need some javascript / jquery).

#TODO:	In patient_form.html everything works leaving action="" in the form.
		But in the tutorial app there was an action specified and passed to the context.
		I would like to understand how that worked.

-------------------------------------------------------------------

#TODO:	find a way to define labels for each field, for example in the model, so those labels can be used everywhere. For example in table headings.
		[DONE!, I've used a package called django-etc which has a custom tag which can be used in the html templates.]
#TODO:	Use bootstrap to add some styling in a quick way.
		[DONE!, I've added bootstrap to a base template which I import in all other templates.]

#TODO:	[DONE!] Write a second version of the views which create and update a patient, based on a Model Form to learn how these forms work.
		My understanding is I have to do this:
		1) Create a forms.py module and in this module create a form based on the ModelForm class.
		2) Create a second version of PatientCreate / PatientUpdate views setting the form_class attibute so it points to the form I created in step 1) .
		3) In the ModelForm class built in step 1), override the method clean_<fieldname> to build some custom validation (this is the main reason why we would use a ModelForm).
		4) Test the validation rule(s) and properly display the error messages to the end user.


